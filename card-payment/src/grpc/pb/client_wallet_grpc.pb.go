// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: client_wallet.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientWalletClient is the client API for ClientWallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientWalletClient interface {
	CreateTransaction(ctx context.Context, in *CreateTransactionInput, opts ...grpc.CallOption) (*Transaction, error)
	GetClientBalance(ctx context.Context, in *GetBalanceInput, opts ...grpc.CallOption) (*BalanceReturn, error)
	GetClientTransactions(ctx context.Context, in *GetClientTransactionsInput, opts ...grpc.CallOption) (*ClientTransactionsReturn, error)
}

type clientWalletClient struct {
	cc grpc.ClientConnInterface
}

func NewClientWalletClient(cc grpc.ClientConnInterface) ClientWalletClient {
	return &clientWalletClient{cc}
}

func (c *clientWalletClient) CreateTransaction(ctx context.Context, in *CreateTransactionInput, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := c.cc.Invoke(ctx, "/clientwallet.ClientWallet/CreateTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientWalletClient) GetClientBalance(ctx context.Context, in *GetBalanceInput, opts ...grpc.CallOption) (*BalanceReturn, error) {
	out := new(BalanceReturn)
	err := c.cc.Invoke(ctx, "/clientwallet.ClientWallet/GetClientBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientWalletClient) GetClientTransactions(ctx context.Context, in *GetClientTransactionsInput, opts ...grpc.CallOption) (*ClientTransactionsReturn, error) {
	out := new(ClientTransactionsReturn)
	err := c.cc.Invoke(ctx, "/clientwallet.ClientWallet/GetClientTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientWalletServer is the server API for ClientWallet service.
// All implementations must embed UnimplementedClientWalletServer
// for forward compatibility
type ClientWalletServer interface {
	CreateTransaction(context.Context, *CreateTransactionInput) (*Transaction, error)
	GetClientBalance(context.Context, *GetBalanceInput) (*BalanceReturn, error)
	GetClientTransactions(context.Context, *GetClientTransactionsInput) (*ClientTransactionsReturn, error)
	mustEmbedUnimplementedClientWalletServer()
}

// UnimplementedClientWalletServer must be embedded to have forward compatible implementations.
type UnimplementedClientWalletServer struct {
}

func (UnimplementedClientWalletServer) CreateTransaction(context.Context, *CreateTransactionInput) (*Transaction, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransaction not implemented")
}
func (UnimplementedClientWalletServer) GetClientBalance(context.Context, *GetBalanceInput) (*BalanceReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientBalance not implemented")
}
func (UnimplementedClientWalletServer) GetClientTransactions(context.Context, *GetClientTransactionsInput) (*ClientTransactionsReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientTransactions not implemented")
}
func (UnimplementedClientWalletServer) mustEmbedUnimplementedClientWalletServer() {}

// UnsafeClientWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientWalletServer will
// result in compilation errors.
type UnsafeClientWalletServer interface {
	mustEmbedUnimplementedClientWalletServer()
}

func RegisterClientWalletServer(s grpc.ServiceRegistrar, srv ClientWalletServer) {
	s.RegisterService(&ClientWallet_ServiceDesc, srv)
}

func _ClientWallet_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientWalletServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientwallet.ClientWallet/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientWalletServer).CreateTransaction(ctx, req.(*CreateTransactionInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientWallet_GetClientBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientWalletServer).GetClientBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientwallet.ClientWallet/GetClientBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientWalletServer).GetClientBalance(ctx, req.(*GetBalanceInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientWallet_GetClientTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientTransactionsInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientWalletServer).GetClientTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clientwallet.ClientWallet/GetClientTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientWalletServer).GetClientTransactions(ctx, req.(*GetClientTransactionsInput))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientWallet_ServiceDesc is the grpc.ServiceDesc for ClientWallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientWallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clientwallet.ClientWallet",
	HandlerType: (*ClientWalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransaction",
			Handler:    _ClientWallet_CreateTransaction_Handler,
		},
		{
			MethodName: "GetClientBalance",
			Handler:    _ClientWallet_GetClientBalance_Handler,
		},
		{
			MethodName: "GetClientTransactions",
			Handler:    _ClientWallet_GetClientTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client_wallet.proto",
}
