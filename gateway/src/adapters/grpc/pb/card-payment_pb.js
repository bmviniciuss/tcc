// source: card-payment.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.cardpayment.Payment', null, global);
goog.exportSymbol('proto.cardpayment.PaymentInfo', null, global);
goog.exportSymbol('proto.cardpayment.PaymentInfoInput', null, global);
goog.exportSymbol('proto.cardpayment.PaymentTypeEnum', null, global);
goog.exportSymbol('proto.cardpayment.ProcessCardPaymentInput', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cardpayment.ProcessCardPaymentInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cardpayment.ProcessCardPaymentInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cardpayment.ProcessCardPaymentInput.displayName = 'proto.cardpayment.ProcessCardPaymentInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cardpayment.PaymentInfoInput = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cardpayment.PaymentInfoInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cardpayment.PaymentInfoInput.displayName = 'proto.cardpayment.PaymentInfoInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cardpayment.Payment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cardpayment.Payment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cardpayment.Payment.displayName = 'proto.cardpayment.Payment';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cardpayment.PaymentInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cardpayment.PaymentInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cardpayment.PaymentInfo.displayName = 'proto.cardpayment.PaymentInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cardpayment.ProcessCardPaymentInput.prototype.toObject = function(opt_includeInstance) {
  return proto.cardpayment.ProcessCardPaymentInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cardpayment.ProcessCardPaymentInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cardpayment.ProcessCardPaymentInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    paymenttype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    paymentdate: jspb.Message.getFieldWithDefault(msg, 3, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    paymentinfo: (f = msg.getPaymentinfo()) && proto.cardpayment.PaymentInfoInput.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cardpayment.ProcessCardPaymentInput}
 */
proto.cardpayment.ProcessCardPaymentInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cardpayment.ProcessCardPaymentInput;
  return proto.cardpayment.ProcessCardPaymentInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cardpayment.ProcessCardPaymentInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cardpayment.ProcessCardPaymentInput}
 */
proto.cardpayment.ProcessCardPaymentInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 2:
      var value = /** @type {!proto.cardpayment.PaymentTypeEnum} */ (reader.readEnum());
      msg.setPaymenttype(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaymentdate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    case 5:
      var value = new proto.cardpayment.PaymentInfoInput;
      reader.readMessage(value,proto.cardpayment.PaymentInfoInput.deserializeBinaryFromReader);
      msg.setPaymentinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cardpayment.ProcessCardPaymentInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cardpayment.ProcessCardPaymentInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cardpayment.ProcessCardPaymentInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cardpayment.ProcessCardPaymentInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPaymenttype();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPaymentdate();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getPaymentinfo();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.cardpayment.PaymentInfoInput.serializeBinaryToWriter
    );
  }
};


/**
 * optional string clientId = 1;
 * @return {string}
 */
proto.cardpayment.ProcessCardPaymentInput.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cardpayment.ProcessCardPaymentInput} returns this
 */
proto.cardpayment.ProcessCardPaymentInput.prototype.setClientid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PaymentTypeEnum paymentType = 2;
 * @return {!proto.cardpayment.PaymentTypeEnum}
 */
proto.cardpayment.ProcessCardPaymentInput.prototype.getPaymenttype = function() {
  return /** @type {!proto.cardpayment.PaymentTypeEnum} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.cardpayment.PaymentTypeEnum} value
 * @return {!proto.cardpayment.ProcessCardPaymentInput} returns this
 */
proto.cardpayment.ProcessCardPaymentInput.prototype.setPaymenttype = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string paymentDate = 3;
 * @return {string}
 */
proto.cardpayment.ProcessCardPaymentInput.prototype.getPaymentdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cardpayment.ProcessCardPaymentInput} returns this
 */
proto.cardpayment.ProcessCardPaymentInput.prototype.setPaymentdate = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional float amount = 4;
 * @return {number}
 */
proto.cardpayment.ProcessCardPaymentInput.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.cardpayment.ProcessCardPaymentInput} returns this
 */
proto.cardpayment.ProcessCardPaymentInput.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional PaymentInfoInput paymentInfo = 5;
 * @return {?proto.cardpayment.PaymentInfoInput}
 */
proto.cardpayment.ProcessCardPaymentInput.prototype.getPaymentinfo = function() {
  return /** @type{?proto.cardpayment.PaymentInfoInput} */ (
    jspb.Message.getWrapperField(this, proto.cardpayment.PaymentInfoInput, 5));
};


/**
 * @param {?proto.cardpayment.PaymentInfoInput|undefined} value
 * @return {!proto.cardpayment.ProcessCardPaymentInput} returns this
*/
proto.cardpayment.ProcessCardPaymentInput.prototype.setPaymentinfo = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cardpayment.ProcessCardPaymentInput} returns this
 */
proto.cardpayment.ProcessCardPaymentInput.prototype.clearPaymentinfo = function() {
  return this.setPaymentinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cardpayment.ProcessCardPaymentInput.prototype.hasPaymentinfo = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cardpayment.PaymentInfoInput.prototype.toObject = function(opt_includeInstance) {
  return proto.cardpayment.PaymentInfoInput.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cardpayment.PaymentInfoInput} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cardpayment.PaymentInfoInput.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardtoken: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cardpayment.PaymentInfoInput}
 */
proto.cardpayment.PaymentInfoInput.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cardpayment.PaymentInfoInput;
  return proto.cardpayment.PaymentInfoInput.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cardpayment.PaymentInfoInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cardpayment.PaymentInfoInput}
 */
proto.cardpayment.PaymentInfoInput.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardtoken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cardpayment.PaymentInfoInput.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cardpayment.PaymentInfoInput.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cardpayment.PaymentInfoInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cardpayment.PaymentInfoInput.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardtoken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cardToken = 1;
 * @return {string}
 */
proto.cardpayment.PaymentInfoInput.prototype.getCardtoken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cardpayment.PaymentInfoInput} returns this
 */
proto.cardpayment.PaymentInfoInput.prototype.setCardtoken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cardpayment.Payment.prototype.toObject = function(opt_includeInstance) {
  return proto.cardpayment.Payment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cardpayment.Payment} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cardpayment.Payment.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    clientid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    paymenttype: jspb.Message.getFieldWithDefault(msg, 3, ""),
    paymentdate: jspb.Message.getFieldWithDefault(msg, 4, ""),
    amount: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    paymentinfo: (f = msg.getPaymentinfo()) && proto.cardpayment.PaymentInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cardpayment.Payment}
 */
proto.cardpayment.Payment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cardpayment.Payment;
  return proto.cardpayment.Payment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cardpayment.Payment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cardpayment.Payment}
 */
proto.cardpayment.Payment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setClientid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaymenttype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPaymentdate(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAmount(value);
      break;
    case 6:
      var value = new proto.cardpayment.PaymentInfo;
      reader.readMessage(value,proto.cardpayment.PaymentInfo.deserializeBinaryFromReader);
      msg.setPaymentinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cardpayment.Payment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cardpayment.Payment.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cardpayment.Payment} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cardpayment.Payment.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClientid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPaymenttype();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPaymentdate();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getAmount();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getPaymentinfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.cardpayment.PaymentInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.cardpayment.Payment.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cardpayment.Payment} returns this
 */
proto.cardpayment.Payment.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string clientId = 2;
 * @return {string}
 */
proto.cardpayment.Payment.prototype.getClientid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cardpayment.Payment} returns this
 */
proto.cardpayment.Payment.prototype.setClientid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string paymentType = 3;
 * @return {string}
 */
proto.cardpayment.Payment.prototype.getPaymenttype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cardpayment.Payment} returns this
 */
proto.cardpayment.Payment.prototype.setPaymenttype = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string paymentDate = 4;
 * @return {string}
 */
proto.cardpayment.Payment.prototype.getPaymentdate = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cardpayment.Payment} returns this
 */
proto.cardpayment.Payment.prototype.setPaymentdate = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional float amount = 5;
 * @return {number}
 */
proto.cardpayment.Payment.prototype.getAmount = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.cardpayment.Payment} returns this
 */
proto.cardpayment.Payment.prototype.setAmount = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional PaymentInfo paymentInfo = 6;
 * @return {?proto.cardpayment.PaymentInfo}
 */
proto.cardpayment.Payment.prototype.getPaymentinfo = function() {
  return /** @type{?proto.cardpayment.PaymentInfo} */ (
    jspb.Message.getWrapperField(this, proto.cardpayment.PaymentInfo, 6));
};


/**
 * @param {?proto.cardpayment.PaymentInfo|undefined} value
 * @return {!proto.cardpayment.Payment} returns this
*/
proto.cardpayment.Payment.prototype.setPaymentinfo = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.cardpayment.Payment} returns this
 */
proto.cardpayment.Payment.prototype.clearPaymentinfo = function() {
  return this.setPaymentinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.cardpayment.Payment.prototype.hasPaymentinfo = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cardpayment.PaymentInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.cardpayment.PaymentInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cardpayment.PaymentInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cardpayment.PaymentInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    maskednumber: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cardpayment.PaymentInfo}
 */
proto.cardpayment.PaymentInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cardpayment.PaymentInfo;
  return proto.cardpayment.PaymentInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cardpayment.PaymentInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cardpayment.PaymentInfo}
 */
proto.cardpayment.PaymentInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaskednumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cardpayment.PaymentInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cardpayment.PaymentInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cardpayment.PaymentInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cardpayment.PaymentInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaskednumber();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string maskedNumber = 1;
 * @return {string}
 */
proto.cardpayment.PaymentInfo.prototype.getMaskednumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cardpayment.PaymentInfo} returns this
 */
proto.cardpayment.PaymentInfo.prototype.setMaskednumber = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.cardpayment.PaymentTypeEnum = {
  CREDIT_CARD: 0,
  DEBIT_CARD: 1
};

goog.object.extend(exports, proto.cardpayment);
