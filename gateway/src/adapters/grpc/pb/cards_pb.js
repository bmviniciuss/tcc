// source: cards.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.cards.CreateCardRequest', null, global);
goog.exportSymbol('proto.cards.FullCard', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cards.CreateCardRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cards.CreateCardRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cards.CreateCardRequest.displayName = 'proto.cards.CreateCardRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.cards.FullCard = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.cards.FullCard, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.cards.FullCard.displayName = 'proto.cards.FullCard';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cards.CreateCardRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.cards.CreateCardRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cards.CreateCardRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cards.CreateCardRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cardholderName: jspb.Message.getFieldWithDefault(msg, 1, ""),
    iscredit: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    isdebit: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cards.CreateCardRequest}
 */
proto.cards.CreateCardRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cards.CreateCardRequest;
  return proto.cards.CreateCardRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cards.CreateCardRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cards.CreateCardRequest}
 */
proto.cards.CreateCardRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardholderName(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscredit(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdebit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cards.CreateCardRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cards.CreateCardRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cards.CreateCardRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cards.CreateCardRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCardholderName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIscredit();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getIsdebit();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string cardholder_name = 1;
 * @return {string}
 */
proto.cards.CreateCardRequest.prototype.getCardholderName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cards.CreateCardRequest} returns this
 */
proto.cards.CreateCardRequest.prototype.setCardholderName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool isCredit = 2;
 * @return {boolean}
 */
proto.cards.CreateCardRequest.prototype.getIscredit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cards.CreateCardRequest} returns this
 */
proto.cards.CreateCardRequest.prototype.setIscredit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional bool isDebit = 3;
 * @return {boolean}
 */
proto.cards.CreateCardRequest.prototype.getIsdebit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cards.CreateCardRequest} returns this
 */
proto.cards.CreateCardRequest.prototype.setIsdebit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.cards.FullCard.prototype.toObject = function(opt_includeInstance) {
  return proto.cards.FullCard.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.cards.FullCard} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cards.FullCard.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cardholdername: jspb.Message.getFieldWithDefault(msg, 2, ""),
    number: jspb.Message.getFieldWithDefault(msg, 3, ""),
    cvv: jspb.Message.getFieldWithDefault(msg, 4, ""),
    token: jspb.Message.getFieldWithDefault(msg, 5, ""),
    maskednumber: jspb.Message.getFieldWithDefault(msg, 6, ""),
    expirationyear: jspb.Message.getFieldWithDefault(msg, 7, 0),
    expirationmonth: jspb.Message.getFieldWithDefault(msg, 8, 0),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 9, false),
    iscredit: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    isdebit: jspb.Message.getBooleanFieldWithDefault(msg, 11, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.cards.FullCard}
 */
proto.cards.FullCard.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.cards.FullCard;
  return proto.cards.FullCard.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.cards.FullCard} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.cards.FullCard}
 */
proto.cards.FullCard.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCardholdername(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCvv(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setMaskednumber(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpirationyear(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpirationmonth(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIscredit(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdebit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.cards.FullCard.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.cards.FullCard.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.cards.FullCard} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.cards.FullCard.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCardholdername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCvv();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMaskednumber();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getExpirationyear();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getExpirationmonth();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getIscredit();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getIsdebit();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.cards.FullCard.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.cards.FullCard} returns this
 */
proto.cards.FullCard.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cardholderName = 2;
 * @return {string}
 */
proto.cards.FullCard.prototype.getCardholdername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.cards.FullCard} returns this
 */
proto.cards.FullCard.prototype.setCardholdername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string number = 3;
 * @return {string}
 */
proto.cards.FullCard.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.cards.FullCard} returns this
 */
proto.cards.FullCard.prototype.setNumber = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string cvv = 4;
 * @return {string}
 */
proto.cards.FullCard.prototype.getCvv = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.cards.FullCard} returns this
 */
proto.cards.FullCard.prototype.setCvv = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string token = 5;
 * @return {string}
 */
proto.cards.FullCard.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.cards.FullCard} returns this
 */
proto.cards.FullCard.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string maskedNumber = 6;
 * @return {string}
 */
proto.cards.FullCard.prototype.getMaskednumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.cards.FullCard} returns this
 */
proto.cards.FullCard.prototype.setMaskednumber = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional int64 expirationYear = 7;
 * @return {number}
 */
proto.cards.FullCard.prototype.getExpirationyear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.cards.FullCard} returns this
 */
proto.cards.FullCard.prototype.setExpirationyear = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 expirationMonth = 8;
 * @return {number}
 */
proto.cards.FullCard.prototype.getExpirationmonth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.cards.FullCard} returns this
 */
proto.cards.FullCard.prototype.setExpirationmonth = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool active = 9;
 * @return {boolean}
 */
proto.cards.FullCard.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cards.FullCard} returns this
 */
proto.cards.FullCard.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool isCredit = 10;
 * @return {boolean}
 */
proto.cards.FullCard.prototype.getIscredit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cards.FullCard} returns this
 */
proto.cards.FullCard.prototype.setIscredit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional bool isDebit = 11;
 * @return {boolean}
 */
proto.cards.FullCard.prototype.getIsdebit = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.cards.FullCard} returns this
 */
proto.cards.FullCard.prototype.setIsdebit = function(value) {
  return jspb.Message.setProto3BooleanField(this, 11, value);
};


goog.object.extend(exports, proto.cards);
